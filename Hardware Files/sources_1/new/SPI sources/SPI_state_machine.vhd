library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- State machine with 2 states: IDLE and send_enb. send_enb is enable signal for other blocks 
-- in the design. Transition between IDLE to send_enb happens by the input signal send. Transition 
-- from send_enb back to IDLE happens by the asynchronous rst input signal. rst signal is 
-- generated by the general rst of the entire system or by the counter block.

entity SPI_state_machine is
    generic(mode: integer range 0 to 3 := 0);
       port(clk,rst,send: in std_logic;
            state_out: out std_logic);
end SPI_state_machine;

architecture Behavioral of SPI_state_machine is

type state is(IDLE,send_enb);
signal PS,NS: state;
signal mode_clk: std_logic;

begin

with mode select
mode_clk <= not clk when 0,
            not clk when 1,
            clk when others;

process(mode_clk,rst) begin
    if rst='1' then 
        PS<=IDLE;
    elsif rising_edge(mode_clk) then
        PS<=NS;
    end if;
end process;

process(send,PS,rst) begin
    if rst='1' then
        NS <= IDLE;
    end if;
    case PS is
        when IDLE =>
            if send='1' then
                NS<=send_enb;
            end if;
            state_out<='0';
        when send_enb =>
            NS<=send_enb;
            state_out<='1';
    end case;
end process;

end Behavioral;
